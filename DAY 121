2071. Maximum Number of Tasks You Can Assign
Solved
Hard
Topics
Companies
Hint
You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).

Additionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.

Given the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.












class Solution {
public:
    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength) {
        sort(begin(workers), end(workers));
        sort(begin(tasks), end(tasks));

        int lTasks = -1, rTasks = min(tasks.size(), workers.size()) - 1;

        while (lTasks < rTasks) {
            int midTasks = (lTasks + rTasks + 1) >> 1, t = midTasks;
            deque<int> dq;

            for (int w = workers.size() - 1, freePills = pills; t >= 0; t--) {
                if (dq.size() > 0 && dq.front() >= tasks.at(t)) {
                    dq.pop_front();
                } else if (w >= 0 && workers.at(w) >= tasks.at(t)) {
                    w--;
                } else if (freePills > 0) {
                    while (w >= 0 && workers.at(w) + strength >= tasks.at(t))
                        dq.push_back(workers.at(w--));

                    if (dq.size() == 0) break;
                    dq.pop_back(), freePills--;
                } else break;
            }

            t == -1 ? lTasks = midTasks : rTasks = midTasks - 1;
        }

        return lTasks + 1;
    }
};
