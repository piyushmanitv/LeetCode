3191. Minimum Operations to Make Binary Array Elements Equal to One I






You are given a binary array nums.

You can do the following operation on the array any number of times (possibly zero):

Choose any 3 consecutive elements from the array and flip all of them.
Flipping an element means changing its value from 0 to 1, and from 1 to 0.

Return the minimum number of operations required to make all elements in nums equal to 1. If it is impossible, return -1.












class Solution {
public:
    int minOperations(vector<int>& nums) {
        vector<int> dp(nums.size(), 0);
        int opr = 0;
        for (int i = 0; i < nums.size() - 2; i++) {
            if (nums[i] ^ dp[i] != 1) {
                opr++;
                dp[i] = dp[i] ^ 1;
                dp[i + 1] = dp[i + 1] ^ 1;
                dp[i + 2] = dp[i + 2] ^ 1;
            }
        }
        int n = nums.size();
        if (nums[n - 1] ^ dp[n-1] != 1 || nums[n-2] ^ dp[n-2] != 1) return -1;
        return opr;
    }
};
