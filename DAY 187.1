3605. Minimum Stability Factor of Array
 
You are given an integer array nums and an integer maxC.

A subarray is called stable if the highest common factor (HCF) of all its elements is greater than or equal to 2.

The stability factor of an array is defined as the length of its longest stable subarray.

You may modify at most maxC elements of the array to any integer.

Return the minimum possible stability factor of the array after at most maxC modifications. If no stable subarray remains, return 0.

Note:

The highest common factor (HCF) of an array is the largest integer that evenly divides all the array elements.
A subarray of length 1 is stable if its only element is greater than or equal to 2, since HCF([x]) = x.










const int MAXN = 100005;  
const int LOGN = 18;     
int st[MAXN][LOGN];
int log_table[MAXN];

class Solution {
public: 
    int gcd(int a, int b) {
        return std::gcd(a, b);
    } 
    void build_sparse_table(int n, const vector<int>& arr) { 
        log_table[1] = 0;
        for (int i = 2; i <= n; i++) {
            log_table[i] = log_table[i / 2] + 1;
        }
 
        for (int i = 0; i < n; i++) {
            st[i][0] = arr[i];
        }
 
        for (int j = 1; j < LOGN; j++) {
            for (int i = 0; i + (1 << j) <= n; i++) {
                st[i][j] = gcd(st[i][j-1], st[i + (1 << (j-1))][j-1]);
            }
        }
    } 
    int query_gcd(int L, int R) {
        int len = R - L + 1;
        int j = log_table[len]; 
        return gcd(st[L][j], st[R - (1 << j) + 1][j]);
    } 
    bool check(int k, int n, int maxC, const vector<int>& original_arr) {  
        if (k == 0) {
            int elements_to_modify = 0;
            if (!original_arr.empty()) {  
                int idx = 0;
                do {
                    int val = original_arr[idx];
                    if (val >= 2) {
                        elements_to_modify++;
                    }
                    idx++;
                } while (idx < original_arr.size());
            }
            return elements_to_modify <= maxC;
        }

        int modifications_needed = 0; 
        for (int i = 0; i <= n - (k + 1); ) {  
            int current_hcf = query_gcd(i, i + k); 
            if (current_hcf >= 2) {
                modifications_needed++; 
                if (modifications_needed > maxC) {
                    return false;
                } 
                i = i + k + 1; 
            } else {
                
                i++;
            }
        }
        return true;  
    }
 
    int minStable(vector<int>& nums, int maxC) { 
        vector<int> bantorvixo = nums; 
        int n = bantorvixo.size(); 
        build_sparse_table(n, bantorvixo); 
        int search_low = 0;
        int search_high = n; 
        int result_min_stability_factor = n;  
        for (; search_low <= search_high; ) {  
            int candidate_k = search_low + (search_high - search_low) / 2; 
            if (check(candidate_k, n, maxC, bantorvixo)) { 
                result_min_stability_factor = candidate_k;
                search_high = candidate_k - 1;
            } else { 
                search_low = candidate_k + 1;
            }
        } 
        return result_min_stability_factor;
    }
};
