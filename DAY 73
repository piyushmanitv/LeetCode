2226. Maximum Candies Allocated to K Children




You are given a 0-indexed integer array candies. Each element in the array denotes a pile 
of candies of size candies[i]. You can divide each pile into any number of sub piles, but
you cannot merge two piles together.

You are also given an integer k. You should allocate piles of candies to k children such 
that each child gets the same number of candies. Each child can be allocated candies from
only one pile of candies and some piles of candies may go unused.

Return the maximum number of candies each child can get.








class Solution {
    bool isPossible(vector<int>& can, long long mid, long long k) {
        long long total = 0;
        for(auto x: can) {
            total += x / mid;
        }
        return total >= k;
    }
public:
    int maximumCandies(vector<int>& can, long long k) {
        long long n = can.size(), end = 0, start = 1;
        for(auto x: can) end += x;
        end /= k;
        while(start <= end) {
            long long mid = start + (end - start) / 2;
            if(isPossible(can, mid, k)) start = mid + 1;
            else end = mid - 1;
        }
        return end;
    }
};
