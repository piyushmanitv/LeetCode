Dynamic Programming





213. House Robber II



You are a professional robber planning to rob houses along a street. 
Each house has a certain amount of money stashed. All houses at this place 
are arranged in a circle. That means the first house is the neighbor of the 
last one. Meanwhile, adjacent houses have a security system connected, and 
it will automatically contact the police if two adjacent houses were broken 
into on the same night.

Given an integer array nums representing the amount of money of each house, 
return the maximum amount of money you can rob tonight without alerting the police.







class Solution {
private:
    int solve(vector<int> &nums,int start,int end){
        int prev1=nums[start];
        int n=end;
        int prev2=0;
        int curr=0;
        for(int i=start+1;i<n;i++){
            int pick=nums[i];
            if(i>1){
                pick+=prev2;
            }
            int notPick=0+prev1;
            curr=max(pick,notPick);
            prev2=prev1;
            prev1=curr;
        }
        return prev1;
    }
public:
    int rob(vector<int>& nums) {
        if(nums.size()==1){
            return nums[0];
        }
        int ans1=solve(nums,0,nums.size()-1);
        int ans2=solve(nums,1,nums.size());
        return max(ans1,ans2);
    }
};

