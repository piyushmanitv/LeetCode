1625. Lexicographically Smallest String After Applying Operations
Medium
Topics
premium lock icon
Companies
Hint
You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.

You can apply either of the following two operations any number of times and in any order on s:

Add a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = "3456" and a = 5, s becomes "3951".
Rotate s to the right by b positions. For example, if s = "3456" and b = 1, s becomes "6345".
Return the lexicographically smallest string you can obtain by applying the above operations any number of times on s.

A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, "0158" is lexicographically smaller than "0190" because the first position they differ is at the third letter, and '5' comes before '9'.










class Solution {
public:
    static int n;
    static inline void add_odd(char* s, int a){
        for(int i=1; i<n; i+=2){
            const int d=(s[i]-'0'+a);
            s[i]='0'+(d>=10?d-10:d);
        }
    }
    static inline void min_add_odd(char* s, int a, int A) {
        const int d=s[1]-'0';
        if (d<a) return ;
        add_odd(s, (10-d/a)*a%10);
    }

    static inline void add_even(char* s, int a){
        for(int i=0; i<n; i+=2){
            const int d=(s[i]-'0'+a);
            s[i]='0'+(d>=10?d-10:d);
        }
    }
    static inline void min_add_even(char* s, int a, int A) {
        const int d=s[0]-'0';
        if (d<a) return ;
        add_even(s, (10-d/a)*a%10);
    }
    static inline void rotate(char* s, int b){
        reverse(s, s+n);
        reverse(s, s+b);
        reverse(s+b, s+n);
    }
    static string findLexSmallestString(string s_, int a, int b) {
        n=s_.size();
        char s[101]; 
        strcpy(s, s_.c_str());
        s[n]='\0';
        const int a0=gcd(a, 10), b0=gcd(n, b);
        const int A=10/a0, B=n/b0;
        char ans[101];
        memset(ans, '9', n);
        ans[n]='\0';
        if (b0%2==0){
            for(int j=0; j<B; j++){
                rotate(s, b0);
                min_add_odd(s, a0, A);
                if (strcmp(s, ans)<0)
                    strcpy(ans, s);
            }
            return string(ans);
        }
        else{
            for(int j=0; j<B; j++){
                rotate(s, b0);
                min_add_odd(s, a0, A);
                min_add_even(s, a0, A);
                if (strcmp(s, ans)<0)
                    strcpy(ans, s);
            }
        }
        return string(ans);
    }
};

int Solution::n;
