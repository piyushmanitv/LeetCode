2130. Maximum Twin Sum of a Linked List




In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.














/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode* reverse_linked_list(ListNode* head)
{
    if(head==nullptr || head->next==nullptr)
    {
        return head;
    }
    ListNode* newHead=reverse_linked_list(head->next);
    ListNode* front=head->next;
    front->next=head;
    head->next=nullptr;
    return newHead;
}
    int pairSum(ListNode* head) {
        int cnt=0;
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=nullptr)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode* newHead=reverse_linked_list(slow);

        ListNode* temp1=head;
        ListNode* temp2=newHead;
        int answ=INT_MIN;
        while(temp2!=nullptr)
        {
            answ=max(answ,(temp1->val+temp2->val));
            temp1=temp1->next;
            temp2=temp2->next;
        }
        return answ;
    }
};
