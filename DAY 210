2411. Smallest Subarrays With Maximum Bitwise OR
Medium
Topics
premium lock icon
Companies
Hint
You are given a 0-indexed array nums of length n, consisting of non-negative integers. For each index i from 0 to n - 1, you must determine the size of the minimum sized non-empty subarray of nums starting at i (inclusive) that has the maximum possible bitwise OR.

In other words, let Bij be the bitwise OR of the subarray nums[i...j]. You need to find the smallest subarray starting at i, such that bitwise OR of this subarray is equal to max(Bik) where i <= k <= n - 1.
The bitwise OR of an array is the bitwise OR of all the numbers in it.

Return an integer array answer of size n where answer[i] is the length of the minimum sized subarray starting at i with maximum bitwise OR.

A subarray is a contiguous non-empty sequence of elements within an array.








class Solution {
public:
    vector<int> smallestSubarrays(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n);
        vector<int> nearestRightSetBit(32, 0);
        for (int i = n - 1; i >= 0; i--) {
            int number = nums[i];
            int j = 0;
            while (number > 0) {
                if (number & 1) {
                    nearestRightSetBit[j] = i;
                }
                number >>= 1;
                j++;
            }
            int maxLength = 1;
            for (int j = 0; j < 32; j++) {
                maxLength = max(maxLength, nearestRightSetBit[j] - i + 1);
            }
            res[i] = maxLength;
        }
        return res;
    }
};
