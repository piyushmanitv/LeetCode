2542. Maximum Subsequence Score
Solved
Medium
Topics
Companies
Hint
You are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. You must choose a subsequence of indices from nums1 of length k.

For chosen indices i0, i1, ..., ik - 1, your score is defined as:

The sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2.
It can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]).
Return the maximum possible score.

A subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements








#pragma GCC optimize("O3,unroll-loops,Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx")
static const auto meow = []() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 0;
}();

#define LC_HACK
#ifdef LC_HACK
const auto __ = []() {
  struct ___ { static void _() { std::ofstream("display_runtime.txt") << 0 << '\n'; } };
  std::atexit(&___::_);
  return 0;
}();
#endif



class Solution {
public:
    long long maxScore(vector<int>& nums1, vector<int>& nums2, int k) {
        int n = nums1.size() ;
        vector<pair<int, int>> arr ;

        for (int i = 0; i < n; i++) {
            arr.push_back(make_pair(nums2[i], nums1[i])) ;
        }

        sort(arr.rbegin(), arr.rend()) ;

        long long ans = 0 ;
        long long sum = 0 ;
        priority_queue<int> pq ;

        for (int i = 0; i < k - 1; i++) {
            sum += arr[i].second ;
            pq.push(-arr[i].second) ;
        }

        for (int i = k - 1; i < n; i++) {
            sum += arr[i].second ;
            pq.push(-arr[i].second) ;

            ans = max(ans, sum * arr[i].first) ;
  
            sum += pq.top() ;
            pq.pop() ;
        }

        return ans ;
    }
};
