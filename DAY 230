679. 24 Game
Hard
Topics
premium lock icon
Companies
You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.

You are restricted with the following rules:

The division operator '/' represents real division, not integer division.
For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.
Every operation done is between two numbers. In particular, we cannot use '-' as a unary operator.
For example, if cards = [1, 1, 1, 1], the expression "-1 - 1 - 1 - 1" is not allowed.
You cannot concatenate numbers together
For example, if cards = [1, 2, 1, 2], the expression "12 + 12" is not valid.
Return true if you can get such expression that evaluates to 24, and false otherwise.











class Solution {
public:
    bool valid(double a, double b){
        return fabs(a + b - 24.0) < 0.0001 | fabs(a - b - 24.0) < 0.0001 | 
                fabs(a * b-24.0) < 0.0001 | fabs(a / b-24.0) < 0.0001;
    }
    bool valid(double a, double b, double c){
        return valid(a + b, c) | valid(a - b, c) | valid(a * b, c) | valid(a / b, c) | 
                valid(a, b + c) | valid(a, b - c) | valid(a, b * c) | valid(a, b / c);
    }
    bool permutation(int idx, vector<double>& nums){
        if(idx == 4){
            return valid(nums[0] + nums[1], nums[2], nums[3]) |
                    valid(nums[0], nums[1] + nums[2], nums[3]) |
                    valid(nums[0], nums[1], nums[2] + nums[3]) |
                    valid(nums[0] - nums[1], nums[2], nums[3]) |
                    valid(nums[0], nums[1] - nums[2], nums[3]) |
                    valid(nums[0], nums[1], nums[2] - nums[3]) |
                    valid(nums[0] * nums[1], nums[2], nums[3]) |
                    valid(nums[0], nums[1] * nums[2], nums[3]) |
                    valid(nums[0], nums[1], nums[2] * nums[3]) |
                    valid(nums[0] / nums[1], nums[2], nums[3]) |
                    valid(nums[0], nums[1] / nums[2], nums[3]) |
                    valid(nums[0], nums[1], nums[2] / nums[3]);
        }
        int res = false;
        unordered_set<int> s;
        for(int i=idx; i<4 && !res; i++){
            if(s.count(nums[i])) continue;
            s.insert(nums[i]);
            swap(nums[i], nums[idx]);
            res |= permutation(idx + 1, nums);
            swap(nums[i], nums[idx]);
        }
        return res;
    }
    bool judgePoint24(vector<int>& cards) {
        vector<double> nums;
        for(int c: cards) nums.push_back((double)c);
        return permutation(0, nums);
    }
};
