2818. Apply Operations to Maximize Score





You are given an array nums of n positive integers and an integer k.

Initially, you start with a score of 1. You have to maximize your score by applying the following operation at most k times:

Choose any non-empty subarray nums[l, ..., r] that you haven't chosen previously.
Choose an element x of nums[l, ..., r] with the highest prime score. If multiple such elements exist, choose the one with the smallest index.
Multiply your score by x.
Here, nums[l, ..., r] denotes the subarray of nums starting at index l and ending at the index r, both ends being inclusive.

The prime score of an integer x is equal to the number of distinct prime factors of x. For example, the prime score of 300 is 3 since 300 = 2 * 2 * 3 * 5 * 5.

Return the maximum possible score after applying at most k operations.

Since the answer may be large, return it modulo 109 + 7.













const int MOD = 1e9 + 7;
const int MAXN = 100000;
int spf[MAXN + 1];

auto init = []() {
    memset(spf, -1, sizeof(spf));
    spf[0] = spf[1] = 0;
    for(int i = 2; i <= MAXN; i++) {
        if(spf[i] == -1) {
            spf[i] = i;
            if(i > 317) continue;
            for(int j = i * i; j <= MAXN; j += i) {
                if(spf[j] == -1) spf[j] = i;
            }
        }
    }
    return 0;
}();
void compute(auto& nums, auto& res, const auto& cmp, bool reverse) {
    int n = nums.size();
    vector<int> stk;
    for(int i = reverse ? n-1 : 0, delta = reverse ? -1 : +1; 0 <= i && i < n; i += delta) {
        while(!stk.empty() && cmp(nums[i], nums[stk.back()])) {
            res[stk.back()] = i;
            stk.pop_back();
        }
        stk.push_back(i);
    }
}

int distinct(int n) {
    if(n <= 1) return 0;
    int cnt = 0, last = 0;
    while(n > 1) {
        if(spf[n] > last) {
            cnt++, last = spf[n];
        }
        n /= spf[n];
    }
    return cnt;
}

long long mod_exp(long long base, int exp, long long mod) {
    long long ans = 1;
    base %= mod;
    while(exp > 0) {
        if(exp & 1) ans = (ans * base) % mod;
        exp >>= 1;
        base = (base * base) % mod;
    }
    return ans;
}

class Solution {
public:
    int maximumScore(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> factors(n), nextGreater(n, n), prevGreater(n, -1);

        for(int i = 0; i < n; i++) {
            factors[i] = distinct(nums[i]);            
        }
        compute(factors, nextGreater, [](int a, int b) { return a > b; }, false);
        compute(factors, prevGreater, [](int a, int b) { return a >= b; }, true);

        priority_queue<array<int, 2>> pq;
        for(int i = 0; i < n; i++) {
            int left = prevGreater[i] + 1, right = nextGreater[i] - 1;
            int ch_left = i - left + 1;
            int ch_right = right - i + 1;
            long long cnt = 1LL * ch_right * ch_left;
            pq.push({nums[i], (int) min(cnt, (long long) 1e9)});
        }
        long long ans = 1;
        while(!pq.empty() && k > 0) {
            auto [mult, cnt] = pq.top();
            pq.pop();
            int take = min(k, cnt);
            ans = (ans * mod_exp(mult, take, MOD)) % MOD;
            k -= take;
        }
        return ans;
    }
};
