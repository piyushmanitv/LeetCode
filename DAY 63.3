87. Scramble String




We can scramble a string s to get a string t using the following algorithm:

If the length of the string is 1, stop.
If the length of the string is > 1, do the following:
Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.
Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.
Apply step 1 recursively on each of the two substrings x and y.
Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.








 class Solution {
public:
    bool isScramble(string s1, string s2) {
        int n = s1.length(); 
        if (n != s2.length()) {
            return false;
        }
        bool dp[n + 1][n][n];
        memset(dp, false, sizeof(dp)); 
        for (int i = 0; i < n; i++) { 
            for (int j = 0; j < n; j++) {
                if (s1[i] == s2[j]) {
                    dp[1][i][j] = true;
                }
            }
        }
        for (int l = 2; l <= n; l++) { 
            for (int i = 0; i <= n - l; i++) {
                for (int j = 0; j <= n - l; j++) {
                    for (int k = 1; k < l; k++) { 
                        if ((dp[k][i][j] && dp[l - k][i + k][j + k]) || 
                            (dp[k][i][j + l - k] && dp[l - k][i + k][j])) { 
                            dp[l][i][j] = true; 
                            break;
                        }
                    }
                }
            }
        }
        return dp[n][0][0];
    }
};
