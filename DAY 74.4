84. Largest Rectangle in Histogram




Given an array of integers heights representing the histogram's bar 
height where the width of each bar is 1, return the area of the 
largest rectangle in the histogram.








#pragma GCC optimize("O3,unroll-loops,Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx")

static const auto harsh = []() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 0;
}();

#define LC_HACK

#ifdef LC_HACK
const auto __ = []() {
    struct ___ {
        static void _() {
            std::ofstream("display_runtime.txt") << 0 << '\n';
        }
    };
    std::atexit(___::_);
    return 0;
}();
#endif

class Solution {
private:
    vector<int> nextsmallerelement(vector<int> arr, int n) {
        stack<int> s;
        s.push(-1);
        vector<int> ans(n);
        for (int i=n-1; i>=0; i--) {
            int curr = arr[i];

            while (s.top() != -1 && arr[s.top()] >= curr) {
                s.pop();
            }
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }
    vector<int> prevsmallerelement(vector<int> arr, int n) {
        stack<int> s;
        s.push(-1);
        vector<int> ans(n);
        for (int i=0; i<n; i++) {
            int curr = arr[i];
            while (s.top() != -1 && arr[s.top()] >= curr) {
                s.pop();
            }
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> next(n);
        next= nextsmallerelement(heights, n);
        vector<int> prev(n);
        prev = prevsmallerelement(heights, n);
        int area = INT_MIN;
        for (int i=0; i<n; i++) {
            int l = heights[i];

            if (next[i]==-1) {
                next[i] = n;
            }
            int b = next[i] - prev[i] - 1;

            int newarea = l*b;
            area = max(newarea, area);
        }
        return area;
    }
};
