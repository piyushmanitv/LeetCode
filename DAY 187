1865. Finding Pairs With a Certain Sum
 
You are given two integer arrays nums1 and nums2. You are tasked to implement a data structure that supports queries of two types:

Add a positive integer to an element of a given index in the array nums2.
Count the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given value (0 <= i < nums1.length and 0 <= j < nums2.length).
Implement the FindSumPairs class:

FindSumPairs(int[] nums1, int[] nums2) Initializes the FindSumPairs object with two integer arrays nums1 and nums2.
void add(int index, int val) Adds val to nums2[index], i.e., apply nums2[index] += val.
int count(int tot) Returns the number of pairs (i, j) such that nums1[i] + nums2[j] == tot.










static auto init = []() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  return nullptr;
}();

class FindSumPairs {
public:
  FindSumPairs(vector<int>& nums1, vector<int>& nums2) : nums2(nums2) {
    auto nums1_counts_temp = unordered_map<int, int>{};
    for (auto num : nums1) ++nums1_counts_temp[num];

    nums1_counts.reserve(size(nums1_counts_temp));
    for (auto [num, cnt] : nums1_counts_temp) {
      nums1_counts.emplace_back(num, cnt);
    }

    for (auto num : nums2) ++nums2_counts[num];
  }
  
  void add(int index, int val) {
    auto& num = nums2[index];
    auto it = nums2_counts.find(num);
    if (--it->second == 0) nums2_counts.erase(it);
    ++nums2_counts[num += val];
  }

  int count(int tot) {
    auto pair_cnt = 0;
    for (auto [num, num_cnt] : nums1_counts) {
      auto target = tot - num;
      if (auto it = nums2_counts.find(target); it != end(nums2_counts)) {
        pair_cnt += num_cnt * it->second;
      }
    }
    return pair_cnt;
  }

private:
  vector<pair<int, int>>  nums1_counts = {};
  unordered_map<int, int> nums2_counts = {};
  vector<int> nums2;
};

/**
 * Your FindSumPairs object will be instantiated and called as such:
 * FindSumPairs* obj = new FindSumPairs(nums1, nums2);
 * obj->add(index,val);
 * int param_2 = obj->count(tot);
 */
