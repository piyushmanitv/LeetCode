3408. Design Task Manager




There is a task management system that allows users to manage their tasks, 
each associated with a priority. The system should efficiently handle adding, 
modifying, executing, and removing tasks.

Implement the TaskManager class:

TaskManager(vector<vector<int>>& tasks) initializes the task manager with a list 
of user-task-priority triples. Each element in the input list is of the form 
[userId, taskId, priority], which adds a task to the specified user with the given priority.

void add(int userId, int taskId, int priority) adds a task with the specified taskId
and priority to the user with userId. It is guaranteed that taskId does not exist in the system.

void edit(int taskId, int newPriority) updates the priority of the existing taskId 
to newPriority. It is guaranteed that taskId exists in the system.

void rmv(int taskId) removes the task identified by taskId from the system. It is 
guaranteed that taskId exists in the system.

int execTop() executes the task with the highest priority across all users. If there 
are multiple tasks with the same highest priority, execute the one with the highest 
taskId. After executing, the taskId is removed from the system. Return the userId 
associated with the executed task. If no tasks are available, return -1.

Note that a user may be assigned multiple tasks.












class TaskManager {
public:
    TaskManager(const vector<vector<int>>& tasks) {
        enum {USER_ID, TASK_ID, PRIORITY};
        for(const auto& curr : tasks) {
            if(size(users_) <= curr[TASK_ID])
                users_.resize(curr[TASK_ID] + 1);
            tasks_.push({curr[TASK_ID], curr[PRIORITY]});
            users_[curr[TASK_ID]] = {curr[USER_ID], curr[PRIORITY]};
        }
    }
    
    void add(int userId, int taskId, int priority) {
        if(size(users_) <= taskId)
            users_.resize(taskId + 1);
        tasks_.push({taskId, priority});
        users_[taskId] = {userId, priority};
    }
    
    void edit(int taskId, int newPriority) {
        if(tasks_.top().task == taskId) tasks_.pop();
        tasks_.push({taskId, newPriority});
        users_[taskId].priority = newPriority;
    }
    
    void rmv(int taskId) {
        if(tasks_.top().task == taskId) tasks_.pop();
        users_[taskId].user = -1;
        users_[taskId].priority = -1;
    }
    
    int execTop() {
        while(!tasks_.empty()) {
            if(tasks_.top().priority != users_[tasks_.top().task].priority)
                tasks_.pop();
            else break;
        }
        if(tasks_.empty()) return -1;
        int user = users_[tasks_.top().task].user;
        users_[tasks_.top().task].user = -1;
        users_[tasks_.top().task].priority = -1;
        tasks_.pop();
        return user;
    }

private:
    struct Task {
        int task;
        int priority;
        bool operator<(const Task& rhs) const {
            if(priority == rhs.priority) return task < rhs.task;
            return priority < rhs.priority;
        }
    };

    priority_queue<Task> tasks_;

    struct User {
        int user = -1;
        int priority = -1;
    };
    
    vector<User> users_;
};

/**
 * Your TaskManager object will be instantiated and called as such:
 * TaskManager* obj = new TaskManager(tasks);
 * obj->add(userId,taskId,priority);
 * obj->edit(taskId,newPriority);
 * obj->rmv(taskId);
 * int param_4 = obj->execTop();
 */
