802. Find Eventual Safe States
Solved
Medium
Topics
Companies
There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.










class Solution {
    bool dfs(vector<vector<int>>& graph, vector<int>& visited, vector<int>& recursionStack, int node, vector<int>& safe) {
        visited[node] = 1;
        recursionStack[node] = 1;

        for (int neighbor : graph[node]) {
            if (!visited[neighbor]) {
                if (dfs(graph, visited, recursionStack, neighbor, safe)) return true;
            } else if (recursionStack[neighbor]) {
                return true;
            }
        }

        safe[node] = 1;
        recursionStack[node] = 0;
        return false;
    }

public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> visited(n, 0), recursionStack(n, 0), safe(n, 0);

        for (int i = 0; i < n; ++i) {
            if (!visited[i]) {
                dfs(graph, visited, recursionStack, i, safe);
            }
        }

        vector<int> result;
        for (int i = 0; i < n; ++i) {
            if (safe[i]) result.push_back(i);
        }

        return result;
    }
};
