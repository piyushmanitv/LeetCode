2438. Range Product Queries of Powers

Given a positive integer n, there exists a 0-indexed array called powers, composed of the minimum number of powers of 2 that sum to n. The array is sorted in non-decreasing order, and there is only one way to form the array.

You are also given a 0-indexed 2D integer array queries, where queries[i] = [lefti, righti]. Each queries[i] represents a query where you have to find the product of all powers[j] with lefti <= j <= righti.

Return an array answers, equal in length to queries, where answers[i] is the answer to the ith query. Since the answer to the ith query may be too large, each answers[i] should be returned modulo 109 + 7.









class Solution {
public:
    vector<int> productQueries(int n, const vector<vector<int>>& queries) {
        constexpr int MOD = 1000000007;
        vector prefix {0};
        while (n) {
            const int j = __builtin_ctz(n);
            prefix.push_back(prefix.back() + j);
            n -= 1 << j;
        }
        n = prefix.back();
        vector ans {1}; ans.reserve(n);
        for (int i = 1; i <= n; i++)
            ans.push_back((ans.back() << 1) % MOD);
        vector<int> ret; ret.reserve(queries.size());
        for (const auto& q : queries)
            ret.push_back(ans[prefix[q[1] + 1] - prefix[q[0]]]);
        return ret;
    }
};
