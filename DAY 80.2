98. Validate Binary Search Tree





Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.










/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    long prev = LONG_MIN;
    bool isValid = true;

    void inorder(TreeNode* root) {
        if (!isValid || !root) return;

        if (root->left) inorder(root->left);

        if (prev >= root->val) {
            isValid = false;
            return;
        }
        prev = root->val;

        if (root->right) inorder(root->right);
    }
    bool isValidBST(TreeNode* root) {
        prev = LONG_MIN; 
        isValid = true; 
        inorder(root);
        return isValid;
    }
};
 
