1976. Number of Ways to Arrive at Destination




You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between 
some intersections. The inputs are generated such that you can reach any intersection from any other 
intersection and that there is at most one road between any two intersections.

You are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there 
is a road between intersections ui and vi that takes timei minutes to travel. You want to know in how many 
ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.

Return the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 109 + 7.









class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<vector<pair<int,int>>> adj(n);
       for(int i=0;i<roads.size();i++){
          int u=roads[i][0];
          int v=roads[i][1];
          int  time=roads[i][2];
          adj[u].push_back({v,time});
          adj[v].push_back({u,time});
       }
       vector<long long>times(n,INT64_MAX);
       vector<long long>ways(n,0);
       priority_queue<pair<long long, long long >,vector<pair<long long, long long >>,greater<pair<long long, long long >>> pq;
         pq.push({0,0});
         ways[0]=1;
         times[0]=0;
           int mod=1e9+7;
         while(!pq.empty()){
           long long time=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            if (time > times[node]) continue;
              for(auto x: adj[node]){
                 long long next_time=x.second;
                 int adj_node=x.first;
                 if(time+next_time<times[adj_node]){
                    times[adj_node]=time+next_time;
                    pq.push({time+next_time,adj_node});
                     ways[adj_node]=ways[node];
                 }
                 else if(time+next_time==times[adj_node]){
                    ways[adj_node]=(ways[node]+ways[adj_node])%mod;
                 }
                 
              }
         }
   return (ways[n-1]%mod); }
};
