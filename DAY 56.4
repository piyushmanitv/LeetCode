98. Validate Binary Search Tree







Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.











/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// Recursive solution - Using LONG_MIN anmd LONG_MAX
class Solution {
public:
    void inorder(TreeNode *root, vector<int> &ans){
        if(root == NULL)
            return;
        
        inorder(root->left, ans);
        ans.push_back(root->val);
        inorder(root->right, ans);
    }

    bool isValidBST(TreeNode* root) {
        vector<int> ans;
        inorder(root, ans);

        for(int i=1; i<ans.size(); i++){
            if(ans[i] <= ans[i-1])
                return false;
        }
        return true;
    }
};
