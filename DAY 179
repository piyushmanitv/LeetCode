2099. Find Subsequence of Length K With the Largest Sum


You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.

Return any such subsequence as an integer array of length k.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.











class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        int n = nums.size();
        vector<pair<int, int>> pairs;
        for (int i = 0; i < n; ++i) {
            pairs.push_back({nums[i], i});
        }
        sort(pairs.begin(), pairs.end(), [](auto& a, auto& b) {
            return a.first > b.first;
        });
        pairs.resize(k);
        sort(pairs.begin(), pairs.end(), [](auto& a, auto& b) {
            return a.second < b.second;
        });
        vector<int> result;
        for (auto& p : pairs){
            result.push_back(p.first);
        }
        return result;
    }
};
