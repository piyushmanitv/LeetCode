3488. Closest Equal Element Queries




You are given a circular array nums and an array queries.

For each query i, you have to find the following:

The minimum distance between the element at index queries[i] and any other 
index j in the circular array, where nums[j] == nums[queries[i]]. If no
such index exists, the answer for that query should be -1.
Return an array answer of the same size as queries, where
answer[i] represents the result for query i.










class Solution {
public:
    vector<int> solveQueries(vector<int>& nums, vector<int>& queries) {
        int n = nums.size();
        unordered_map<int, int> left, right;
        vector<int> dist(nums.size(), INT_MAX);
        for(int i=0; i < n*2; i++) {
            int idx = i%n;
            if(left.find(nums[idx]) != left.end()) {
                dist[idx] = i - left[nums[idx]];
            }
            left[nums[idx]] = i;
        }
        for(int i=n*2 - 1; i>=0; i--) {
            int idx = i%n;
            if(right.find(nums[idx]) != right.end()) {
                dist[idx] = min(dist[idx], right[nums[idx]] - i);
            }
            right[nums[idx]] = i;
        }
        vector<int> ans;
        for(int q:queries) {
            if(dist[q] >= nums.size())
                ans.push_back(-1);
            else
                ans.push_back(dist[q]);
        }
        return ans;
    }
};
