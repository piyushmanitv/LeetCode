2221. Find Triangular Sum of an Array



You are given a 0-indexed integer array nums, where nums[i] is a digit between 0 and 9 (inclusive).

The triangular sum of nums is the value of the only element present in nums after the following process terminates:

Let nums comprise of n elements. If n == 1, end the process. Otherwise, create a new 0-indexed integer array newNums of length n - 1.
For each index i, where 0 <= i < n - 1, assign the value of newNums[i] as (nums[i] + nums[i+1]) % 10, where % denotes modulo operator.
Replace the array nums with newNums.
Repeat the entire process starting from step 1.
Return the triangular sum of nums.









#include <ranges> 
inline int add_mod(int a, int b){
    auto sum = a + b;
    if(sum >= 10) sum -= 10;
    return sum;
}

array<vector<int>, 1'001> make_coefficients(){
    array<vector<int>, 1'001> coefficients = {};
    coefficients[1] = {1};
    for(auto i : views::iota(2, 1'001)){
        auto& prev_row = coefficients[i - 1];
        auto& row = coefficients[i];
        row.resize(i);
        row[0] = 1;
        for(auto j : views::iota(1, i - 1)){
            row[j] = add_mod(prev_row[j - 1], prev_row[j]);
        }
        row[i - 1] = 1;
    }
    return coefficients;
}

array<vector<int>, 1'001> coefficients = make_coefficients();

class Solution{
public:
    int triangularSum(vector<int>& nums){
        auto sum = 0;
        for (auto [num, coeficient] : views::zip(nums, coefficients[size(nums)])){
            sum = add_mod(sum, (num * coeficient) % 10);
        }
        return sum;
    }
};
