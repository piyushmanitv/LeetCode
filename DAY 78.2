572. Subtree of Another Tree




Given the roots of two binary trees root and subRoot, return true if there 
is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree 
and all of this node's descendants. The tree tree could also be considered as a subtree of itself








/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEqual(TreeNode* root,TreeNode* subRoot){
            if(!root&&!subRoot)return true;
            else if(!root||!subRoot)return false;
            if(root->val!=subRoot->val)return false;
            bool lf=isEqual(root->left,subRoot->left);
            bool rf=isEqual(root->right,subRoot->right);
            return lf&&rf;
        }
        bool recv(TreeNode* root, TreeNode* subRoot){
        if(!root)return false;
        if(root->val==subRoot->val){
            if(isEqual(root,subRoot))return true;
        }
        bool lf=recv(root->left,subRoot);
        bool rt=recv(root->right,subRoot);
        return lf||rt;
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(!root&&!subRoot)return true;
            else if(!root||!subRoot)return false;
        return recv(root,subRoot);
    }
};
