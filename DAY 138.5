187. Repeated DNA Sequences
Solved
Medium
Topics
Companies
The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.

For example, "ACGAATTCCG" is a DNA sequence.
When studying DNA, it is useful to identify repeated sequences within the DNA.

Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.









class Solution {
public:
    int convert(char c) {
        if (c == 'A') {
            return 0;
        } else if (c == 'C') {
            return 1;
        } else if (c == 'G') {
            return 2;
        } else {
            return 3;
        }
    }

    char convert(int i) {
        if (i == 0) {
            return 'A';
        } else if (i == 1) {
            return 'C';
        } else if (i == 2) {
            return 'G';
        } else {
            return 'T';
        }
    }

    string convertString(int num) {
        string rslt = "";
        while (num > 0) {
            int chr = num % 4;
            num >>= 2;
            rslt += convert(chr);
        }
        while (rslt.length() < 10) {
            rslt += "A";
        }
        return rslt;
    }

    vector<string> findRepeatedDnaSequences(string s) {
        bool seen[1048576];
        memset(seen, 0, sizeof(seen));
        
        unordered_set<int> dup;
        vector<string> rslt;
        if (s.length() < 10) {
            return rslt;
        }

        int cur = 0;
        for (int i = 9; i >= 0; i--) {
            cur <<= 2;
            cur += convert(s[i]);
        }
        
        seen[cur] = true;
        for (int i = 10; i < s.length(); i++) {
            if (s[i] != 'A' && s[i] != 'C' && s[i] != 'G' && s[i] != 'T') {
                break;
            }
            cur >>= 2;
            cur += convert(s[i]) << 18;
            if (seen[cur]) {
                dup.insert(cur);
            } else {
                seen[cur] = true;
            }
        }

        for (auto it = dup.begin(); it != dup.end(); it++) {
            rslt.push_back(convertString(*it));
        }
        return rslt;
    }
};
